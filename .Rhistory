rename(word = "recall_response")%>%
left_join(study_data)
recall_data %>%
group_by(serial_position) %>%
count()
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) %>%
geom_line()
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) +
geom_line()
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) +
geom_point()+
geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) +
geom_point()+
geom_line()+
theme_clean()
math_data = data %>% filter(typeoftrial == "math")
View(math_data)
math_data = data %>% filter(typeoftrial == "math")  %>%
group_by(ID) %>%
summarise(accuracy = mean(correct))
View(math_data)
math_data %>%
ggplot(aes(x = accuracy))+
geom_hist()
math_data %>%
ggplot(aes(x = accuracy))+
geom_histogram()
math_data %>%
ggplot(aes(x = accuracy))+
geom_histogram()+
theme_clean()
math_data %>%
ggplot(aes(x = accuracy))+
geom_histogram(binwidth = 0.01)+
theme_clean()
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) +
geom_point(size = 2, color = "black")+
geom_line(color = "blue")+
theme_clean()
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) +
geom_point(size = 2, color = "black")+
geom_line(color = "blue")+
labs(x = "serial position of word", y = "number of times it was recalled",
title = "serial position curve")+
theme_clean()
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) +
geom_point(size = 2, color = "black")+
geom_line(color = "blue")+
labs(x = "serial position of word", y = "number of times it was recalled",
title = "serial position curve")+
theme_clean()+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
recall_data %>%
group_by(serial_position) %>%
count() %>%
ggplot(aes(x = serial_position, y = n)) +
geom_point(size = 2, color = "black")+
geom_line(color = "blue")+
labs(x = "serial position of word", y = "recall count",
title = "serial position curve")+
theme_clean()+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
recall_data= data %>% filter(typeoftrial == "recall") %>%
select(ID, recall_response)  %>% filter(recall_response != "Q") %>%
rename(word = "recall_response")%>%
left_join(study_data)
setwd("~/Documents/active projects/forager_project/forager-analyses")
psyrev_switch = read_csv("psyrev_data_model_all_switch_all_switchresults.csv")
psyrev_similarity = read_csv("psyrev_data/psyrev_data_model_all_switch_all_individualitemfits.csv") %>%
select(Subject, Fluency_Item, Frequency_Value, Phonological_Similarity) %>%
rename(semantic = Frequency_Value,
phonological = Phonological_Similarity)
psyrev_switch = read_csv("psyrev_data/psyrev_data_model_all_switch_all_switchresults.csv")
psyrev_similarity = read_csv("psyrev_data/psyrev_data_model_all_switch_all_individualitemfits.csv") %>%
select(Subject, Fluency_Item, Frequency_Value, Phonological_Similarity) %>%
rename(semantic = Frequency_Value,
phonological = Phonological_Similarity)
psyrev_switch_sample = psyrev_switch %>% filter(Subject == 51 &
Switch_Method %in% c("simdrop", "troyer", "delta_rise=0.0_fall=1.0",
"multimodal_alpha=0.4") &
Fluency_Item %in% c("aardvark", "elephant", "flea", "ferret", "parrot", "hippopotamus")) %>%
mutate(prev = lag(Fluency_Item),
pair = paste(prev, Fluency_Item, sep = "-")) %>%
left_join(psyrev_similarity) %>%
pivot_longer(names_to = "type", cols = c(semantic, phonological)) %>%
group_by(Switch_Method) %>%
mutate(row = row_number(),
Switch_Method = fct_recode(Switch_Method, multimodal = "multimodal_alpha=0.4",
delta = "delta_rise=0.0_fall=1.0",
simdrop = "simdrop",
troyer= "troyer"))%>%
mutate(Switch_Method = fct_relevel(Switch_Method, "troyer","simdrop", "delta", "multimodal"),
Switch_Value = ifelse(Switch_Value == 1, "switch", "cluster"))%>%
filter(Fluency_Item != "aardvark") %>%
rename(method = Switch_Method,
transition = Switch_Value)
psyrev_switch_sample %>%
#filter(method == "troyer")%>%
ggplot(aes(x = row, y = value, group= type, color = type, label = pair)) +
geom_line()+
ggrepel::geom_text_repel(color = "black")+
#geom_point(size = 4)+
#geom_label()+
facet_wrap(~method)+
scale_color_stata()+
geom_point(aes(shape = transition), size = 4)+
ggthemes::theme_few()+
labs(x = "retrieval order", y = "similarity value")+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
psyrev_models = read_csv("psyrev_data/data-psyrev_model_all_switch_all_modelresults.csv")
psyrev_sum_nLL = psyrev_models %>% group_by(Model) %>%
# filter(Model %in% c("forage_static", "forage_dynamic_simdrop", "forage_dynamic_troyer",
#                     "forage_random_baseline")) %>%
summarise(sum_nLL = sum(Negative_Log_Likelihood_Optimized)) %>%
arrange(sum_nLL)
psyrev_sum_nLL
sz_modeldata = read_csv("sz_data/sz_data_model_all_switch_all_modelresults.csv") %>%
rename(subject = Subject) %>%
left_join( readxl::read_excel("sz_data/diagnostic_group_codes.xlsx"))%>%
filter(!is.na(diagnostic_group))
sz_modeldata = read_csv("sz_data/sz_data_model_dynamic_switch_all_modelresults.csv") %>%
rename(subject = Subject) %>%
left_join( readxl::read_excel("sz_data/diagnostic_group_codes.xlsx"))%>%
filter(!is.na(diagnostic_group))
sz_metrics = read_csv("sz_data/sz_data_model_dynamic_switch_all_individualitemfits.csv") %>%
rename(subject = Subject) %>%
left_join( readxl::read_excel("sz_data/diagnostic_group_codes.xlsx"))%>%
filter(!is.na(diagnostic_group))
sz_switch = read_csv("sz_data/sz_data_model_dynamic_switch_all_switchresults.csv") %>%
rename(subject = Subject) %>%
left_join( readxl::read_excel("sz_data/diagnostic_group_codes.xlsx"))%>%
filter(!is.na(diagnostic_group))
subjects = sz_metrics %>% select(subject, diagnostic_group) %>% distinct() %>%
group_by(diagnostic_group) %>% count()
View(subjects)
num_items = sz_metrics %>% select(subject, Fluency_Item, diagnostic_group) %>%
group_by(diagnostic_group, subject) %>% count()
num_items %>%group_by(diagnostic_group)%>%
summarise(ci = list(mean_cl_boot(n) %>%
rename(mean=y, lwr=ymin, upr=ymax))) %>% unnest %>%
ggplot(aes(x = diagnostic_group, y = mean, group = diagnostic_group,
fill = diagnostic_group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
geom_errorbar(aes(ymin=lwr, ymax=upr), size = 0.5, width=.1,
color = "black", position = position_dodge(0.70))+
geom_point(data = num_items, aes(x = diagnostic_group, y = n,
group = diagnostic_group, fill =diagnostic_group),
shape = 21, position = position_jitterdodge(jitter.width = 0.1),
alpha = 0.6)+
theme_few()+
scale_fill_calc()+
scale_color_calc()+
labs(y = "number of items", x = "", title = "forager: Number of Items")+
theme(aspect.ratio = 1)+
theme(axis.title = element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
num_items$diagnostic_group = as.factor(num_items$diagnostic_group)
contrasts(num_items$diagnostic_group) = contr.treatment(3, base = 3)
items_model = lm(data = num_items, n ~ diagnostic_group)
summary(items_model)
metrics_long = sz_metrics %>% select(subject, diagnostic_group, Fluency_Item,
Semantic_Similarity, Phonological_Similarity,Frequency_Value) %>%
rename(semantic = Semantic_Similarity,
frequency = Frequency_Value,
phonological = Phonological_Similarity)%>%
pivot_longer(names_to = "type",
cols=c(semantic, phonological,frequency)) %>%
mutate(type = as.factor(type),
diagnostic_group =as.factor(diagnostic_group))
metrics_long %>%
group_by(diagnostic_group, type) %>%
summarise(ci = list(mean_cl_boot(value) %>%
rename(mean=y, lwr=ymin, upr=ymax))) %>% unnest %>%
filter(type == "frequency") %>%
ggplot(aes(x = type, y = mean, group = diagnostic_group,
fill = diagnostic_group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
geom_errorbar(aes(ymin=lwr, ymax=upr), size = 0.5, width=.1,
color = "black", position = position_dodge(0.70))+
theme_few()+
scale_fill_calc()+
scale_color_calc()+
labs(y = "mean log frequency", x = "", title = "forager: Frequency of Items Produced")+
theme(aspect.ratio = 1)+
theme(axis.title = element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
metrics_long = sz_metrics %>% select(subject, diagnostic_group, Fluency_Item,
Semantic_Similarity, Phonological_Similarity,Frequency_Value) %>%
rename(semantic = Semantic_Similarity,
frequency = Frequency_Value,
phonological = Phonological_Similarity)%>%
pivot_longer(names_to = "type",
cols=c(semantic, phonological,frequency)) %>%
mutate(type = as.factor(type),
diagnostic_group =as.factor(diagnostic_group))
metrics_long %>%
group_by(diagnostic_group, type) %>%
summarise(ci = list(mean_cl_boot(value) %>%
rename(mean=y, lwr=ymin, upr=ymax))) %>% unnest %>%
filter(type == "frequency") %>%
ggplot(aes(x = type, y = mean, group = diagnostic_group,
fill = diagnostic_group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
geom_errorbar(aes(ymin=lwr, ymax=upr), size = 0.5, width=.1,
color = "black", position = position_dodge(0.70))+
theme_few()+
scale_fill_calc()+
scale_color_calc()+
labs(y = "mean log frequency", x = "", title = "forager: Frequency of Items Produced")+
theme(aspect.ratio = 1)+
theme(axis.title = element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
metrics_long$diagnostic_group = as.factor(metrics_long$diagnostic_group)
contrasts(metrics_long$diagnostic_group) = contr.treatment(3, base = 3)
model = lm(data = metrics_long %>% filter(type == "frequency"),
value ~ diagnostic_group)
summary(model)
car::Anova(model)
## count number of switches
switch_count = sz_switch %>%
filter(Switch_Value == 1) %>%
group_by(subject, Switch_Method, diagnostic_group) %>%
count()
switch_count %>%
group_by(diagnostic_group, Switch_Method) %>%
summarise(ci = list(mean_cl_boot(n) %>%
rename(mean=y, lwr=ymin, upr=ymax))) %>% unnest %>%
filter(Switch_Method %in% c("simdrop", "troyer")) %>%
mutate(Switch_Method = fct_recode(Switch_Method, `similarity\ndrop` = "simdrop",
`Troyer\nnorms` = "troyer")) %>%
ggplot(aes(x = Switch_Method, y = mean, group = diagnostic_group,
fill = diagnostic_group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
geom_errorbar(aes(ymin=lwr, ymax=upr), size = 0.5, width=.1,
color = "black", position = position_dodge(0.70))+
theme_few()+
scale_fill_calc()+
scale_color_calc()+
labs(y = "mean number of switches across groups", x = "", title = "forager: Number of Switches")+
theme(aspect.ratio = 1)+
theme(axis.title = element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
## model
switch_model_data = switch_count %>% filter(Switch_Method %in% c("simdrop", "troyer"))
switch_model_data$diagnostic_group = as.factor(switch_model_data$diagnostic_group)
contrasts(switch_model_data$diagnostic_group) = contr.treatment(3, base = 3)
switch_model_simdrop = lm(data = switch_model_data %>% filter(Switch_Method == "simdrop") ,
n ~ diagnostic_group)
summary(switch_model_simdrop)
size_data = sz_switch %>%
filter(Switch_Method %in% c("simdrop", "troyer")) %>%
group_by(subject, diagnostic_group, Switch_Method) %>%
summarise(rl = list(rle(Switch_Value)),
switch_type = rl[[1]]$values,
num_items = rl[[1]]$lengths) %>% select(-rl)%>%
arrange(subject)
cluster_size = size_data %>%
filter(switch_type == 0) %>%
mutate(num_items= num_items+1)
cluster_size %>%
group_by(diagnostic_group, Switch_Method) %>%
summarise(ci = list(mean_cl_boot(num_items) %>%
rename(mean=y, lwr=ymin, upr=ymax))) %>% unnest %>%
mutate(Switch_Method = fct_recode(Switch_Method, `similarity\ndrop` = "simdrop",
`Troyer\nnorms` = "troyer")) %>%
ggplot(aes(x = Switch_Method, y = mean, group = diagnostic_group,
fill = diagnostic_group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
geom_errorbar(aes(ymin=lwr, ymax=upr), size = 0.5, width=.1,
color = "black", position = position_dodge(0.70))+
theme_few()+
scale_fill_calc()+
scale_color_calc()+
labs(y = "mean cluster size", title = "forager: Mean Cluster Size", x= "")+
theme(aspect.ratio = 1)+
theme(axis.title = element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
cluster_size_model_troyer = cluster_size %>% filter(Switch_Method == "troyer")
cluster_size_model_troyer$diagnostic_group = as.factor(cluster_size_model_troyer$diagnostic_group)
contrasts(cluster_size_model_troyer$diagnostic_group) = contr.treatment(3, base = 3)
cluster_size_model_troyer = lm(data = cluster_size_model_troyer, num_items ~ diagnostic_group)
summary(cluster_size_model_troyer)
cluster_size_model_simdrop = cluster_size %>% filter(Switch_Method == "simdrop")
cluster_size_model_simdrop$diagnostic_group = as.factor(cluster_size_model_simdrop$diagnostic_group)
contrasts(cluster_size_model_simdrop$diagnostic_group) = contr.treatment(3, base = 3)
cluster_size_model_simdrop = lm(data = cluster_size_model_simdrop, num_items ~ diagnostic_group)
summary(cluster_size_model_simdrop)
betas = sz_modeldata %>% select(subject, diagnostic_group, Model,
Beta_Frequency, Beta_Semantic, Beta_Phonological) %>%
filter(Model %in% c("forage_dynamic_simdrop")) %>%
pivot_longer(names_to = "beta",
cols=c(Beta_Frequency, Beta_Semantic, Beta_Phonological)) %>%
separate(beta, into = c("beta1", "beta")) %>% select(-beta1)
betas %>%
filter(!is.na(value)) %>%
#filter(beta == "Phonological") %>%
group_by(diagnostic_group, Model, beta) %>%
summarise(ci = list(mean_cl_boot(value) %>%
rename(mean=y, lwr=ymin, upr=ymax))) %>% unnest %>%
arrange(beta)
psyrev_switch_sample %>%
#filter(method == "troyer")%>%
ggplot(aes(x = row, y = value, group= type, color = type, label = pair)) +
geom_line()+
ggrepel::geom_text_repel(color = "black")+
#geom_point(size = 4)+
#geom_label()+
facet_wrap(~method)+
scale_color_stata()+
geom_point(aes(shape = transition), size = 4)+
ggthemes::theme_few()+
labs(x = "retrieval order", y = "similarity value")+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
psyrev_switch_sample %>%
filter(method == "troyer")%>%
ggplot(aes(x = row, y = value, group= type, color = type, label = pair)) +
geom_line()+
ggrepel::geom_text_repel(color = "black")+
#geom_point(size = 4)+
#geom_label()+
facet_wrap(~method)+
scale_color_stata()+
geom_point(aes(shape = transition), size = 4)+
ggthemes::theme_few()+
labs(x = "retrieval order", y = "similarity value")+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
psyrev_switch_sample %>%
filter(method == "troyer")%>%
ggplot(aes(x = row, y = value, group= type, color = type, label = pair)) +
geom_line()+
ggrepel::geom_text_repel(color = "black")+
#geom_point(size = 4)+
#geom_label()+
facet_wrap(~method)+
scale_color_stata()+
#geom_point(aes(shape = transition), size = 4)+
ggthemes::theme_few()+
labs(x = "retrieval order", y = "similarity value")+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
View(psyrev_switch_sample)
psyrev_switch = read_csv("psyrev_data/psyrev_data_model_all_switch_all_switchresults.csv")
psyrev_similarity = read_csv("psyrev_data/psyrev_data_model_all_switch_all_individualitemfits.csv") %>%
select(Subject, Fluency_Item, Frequency_Value, Phonological_Similarity) %>%
rename(semantic = Semantic_Similarity,
phonological = Phonological_Similarity)
View(psyrev_similarity)
psyrev_similarity = read_csv("psyrev_data/psyrev_data_model_all_switch_all_individualitemfits.csv") %>%
select(Subject, Fluency_Item, Semantic_Similarity, Phonological_Similarity) %>%
rename(semantic = Semantic_Similarity,
phonological = Phonological_Similarity)
psyrev_switch_sample = psyrev_switch %>% filter(Subject == 51 &
Switch_Method %in% c("simdrop", "troyer", "delta_rise=0.0_fall=1.0",
"multimodal_alpha=0.4") &
Fluency_Item %in% c("aardvark", "elephant", "flea", "ferret", "parrot", "hippopotamus")) %>%
mutate(prev = lag(Fluency_Item),
pair = paste(prev, Fluency_Item, sep = "-")) %>%
left_join(psyrev_similarity) %>%
pivot_longer(names_to = "type", cols = c(semantic, phonological)) %>%
group_by(Switch_Method) %>%
mutate(row = row_number(),
Switch_Method = fct_recode(Switch_Method, multimodal = "multimodal_alpha=0.4",
delta = "delta_rise=0.0_fall=1.0",
simdrop = "simdrop",
troyer= "troyer"))%>%
mutate(Switch_Method = fct_relevel(Switch_Method, "troyer","simdrop", "delta", "multimodal"),
Switch_Value = ifelse(Switch_Value == 1, "switch", "cluster"))%>%
filter(Fluency_Item != "aardvark") %>%
rename(method = Switch_Method,
transition = Switch_Value)
psyrev_switch_sample %>%
filter(method == "troyer")%>%
ggplot(aes(x = row, y = value, group= type, color = type, label = pair)) +
geom_line()+
ggrepel::geom_text_repel(color = "black")+
#geom_point(size = 4)+
#geom_label()+
facet_wrap(~method)+
scale_color_stata()+
geom_point(aes(shape = transition), size = 4)+
ggthemes::theme_few()+
labs(x = "retrieval order", y = "similarity value")+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
psyrev_switch_sample %>%
filter(method == "troyer")%>%
ggplot(aes(x = row, y = value, group= type, color = type, label = pair)) +
geom_line()+
ggrepel::geom_text_repel(color = "black")+
#geom_point(size = 4)+
#geom_label()+
facet_wrap(~method)+
scale_color_stata()+
geom_point(size = 4)+
ggthemes::theme_few()+
labs(x = "retrieval order", y = "similarity value")+
theme(axis.title = element_text(face = "bold", size = rel(1)),
strip.text= element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
psyrev_models = read_csv("psyrev_data/data-psyrev_model_all_switch_all_modelresults.csv")
psyrev_sum_nLL = psyrev_models %>% group_by(Model) %>%
filter(Model %in% c("forage_static", "forage_dynamic_simdrop", "forage_dynamic_troyer",
"forage_random_baseline")) %>%
summarise(sum_nLL = sum(Negative_Log_Likelihood_Optimized)) %>%
arrange(sum_nLL)
psyrev_sum_nLL
View(psyrev_sum_nLL)
sz_modeldata = read_csv("sz_data/sz_data_model_dynamic_switch_all_modelresults.csv") %>%
rename(subject = Subject) %>%
left_join( readxl::read_excel("sz_data/diagnostic_group_codes.xlsx"))%>%
filter(!is.na(diagnostic_group))
sz_metrics = read_csv("sz_data/sz_data_model_dynamic_switch_all_individualitemfits.csv") %>%
rename(subject = Subject) %>%
left_join( readxl::read_excel("sz_data/diagnostic_group_codes.xlsx"))%>%
filter(!is.na(diagnostic_group))
sz_switch = read_csv("sz_data/sz_data_model_dynamic_switch_all_switchresults.csv") %>%
rename(subject = Subject) %>%
left_join( readxl::read_excel("sz_data/diagnostic_group_codes.xlsx"))%>%
filter(!is.na(diagnostic_group))
subjects = sz_metrics %>% select(subject, diagnostic_group) %>% distinct() %>%
group_by(diagnostic_group) %>% count()
num_items = sz_metrics %>% select(subject, Fluency_Item, diagnostic_group) %>%
group_by(diagnostic_group, subject) %>% count()
num_items %>%group_by(diagnostic_group)%>%
summarise(ci = list(mean_cl_boot(n) %>%
rename(mean=y, lwr=ymin, upr=ymax))) %>% unnest %>%
ggplot(aes(x = diagnostic_group, y = mean, group = diagnostic_group,
fill = diagnostic_group)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7, color= "black")+
geom_errorbar(aes(ymin=lwr, ymax=upr), size = 0.5, width=.1,
color = "black", position = position_dodge(0.70))+
geom_point(data = num_items, aes(x = diagnostic_group, y = n,
group = diagnostic_group, fill =diagnostic_group),
shape = 21, position = position_jitterdodge(jitter.width = 0.1),
alpha = 0.6)+
theme_few()+
scale_fill_calc()+
scale_color_calc()+
labs(y = "number of items", x = "", title = "forager: Number of Items")+
theme(aspect.ratio = 1)+
theme(axis.title = element_text(face = "bold", size = rel(1)),
legend.title = element_text(face = "bold", size = rel(1)),
plot.title = element_text(hjust = .5),
axis.text.x = element_text(face = "bold", size = rel(1.2)))
## model
num_items$diagnostic_group = as.factor(num_items$diagnostic_group)
contrasts(num_items$diagnostic_group) = contr.treatment(3, base = 3)
items_model = lm(data = num_items, n ~ diagnostic_group)
summary(items_model)
